// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/19/2022 14:25:51"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          MUX
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module MUX_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] AR_BUS;
reg [11:0] CW;
reg [7:0] IR_BUS;
reg [7:0] MEM_BUS;
reg [7:0] PC_BUS;
reg [7:0] ULA_BUS;
// wires                                               
wire [7:0] OUT_BUS;

// assign statements (if any)                          
MUX i1 (
// port map - connection between master ports and signals/registers   
	.AR_BUS(AR_BUS),
	.CW(CW),
	.IR_BUS(IR_BUS),
	.MEM_BUS(MEM_BUS),
	.OUT_BUS(OUT_BUS),
	.PC_BUS(PC_BUS),
	.ULA_BUS(ULA_BUS)
);
initial 
begin 
#1000000 $finish;
end 
// AR_BUS[ 7 ]
initial
begin
	AR_BUS[7] = 1'b0;
end 
// AR_BUS[ 6 ]
initial
begin
	AR_BUS[6] = 1'b0;
end 
// AR_BUS[ 5 ]
initial
begin
	AR_BUS[5] = 1'b0;
end 
// AR_BUS[ 4 ]
initial
begin
	AR_BUS[4] = 1'b0;
end 
// AR_BUS[ 3 ]
initial
begin
	AR_BUS[3] = 1'b0;
end 
// AR_BUS[ 2 ]
initial
begin
	AR_BUS[2] = 1'b1;
end 
// AR_BUS[ 1 ]
initial
begin
	AR_BUS[1] = 1'b0;
end 
// AR_BUS[ 0 ]
initial
begin
	AR_BUS[0] = 1'b1;
end 
// IR_BUS[ 7 ]
initial
begin
	IR_BUS[7] = 1'b0;
end 
// IR_BUS[ 6 ]
initial
begin
	IR_BUS[6] = 1'b0;
end 
// IR_BUS[ 5 ]
initial
begin
	IR_BUS[5] = 1'b0;
end 
// IR_BUS[ 4 ]
initial
begin
	IR_BUS[4] = 1'b0;
end 
// IR_BUS[ 3 ]
initial
begin
	IR_BUS[3] = 1'b0;
end 
// IR_BUS[ 2 ]
initial
begin
	IR_BUS[2] = 1'b1;
end 
// IR_BUS[ 1 ]
initial
begin
	IR_BUS[1] = 1'b0;
end 
// IR_BUS[ 0 ]
initial
begin
	IR_BUS[0] = 1'b0;
end 
// MEM_BUS[ 7 ]
initial
begin
	MEM_BUS[7] = 1'b0;
end 
// MEM_BUS[ 6 ]
initial
begin
	MEM_BUS[6] = 1'b0;
end 
// MEM_BUS[ 5 ]
initial
begin
	MEM_BUS[5] = 1'b0;
end 
// MEM_BUS[ 4 ]
initial
begin
	MEM_BUS[4] = 1'b0;
end 
// MEM_BUS[ 3 ]
initial
begin
	MEM_BUS[3] = 1'b0;
end 
// MEM_BUS[ 2 ]
initial
begin
	MEM_BUS[2] = 1'b0;
end 
// MEM_BUS[ 1 ]
initial
begin
	MEM_BUS[1] = 1'b1;
end 
// MEM_BUS[ 0 ]
initial
begin
	MEM_BUS[0] = 1'b1;
end 
// PC_BUS[ 7 ]
initial
begin
	PC_BUS[7] = 1'b0;
end 
// PC_BUS[ 6 ]
initial
begin
	PC_BUS[6] = 1'b0;
end 
// PC_BUS[ 5 ]
initial
begin
	PC_BUS[5] = 1'b0;
end 
// PC_BUS[ 4 ]
initial
begin
	PC_BUS[4] = 1'b0;
end 
// PC_BUS[ 3 ]
initial
begin
	PC_BUS[3] = 1'b0;
end 
// PC_BUS[ 2 ]
initial
begin
	PC_BUS[2] = 1'b0;
end 
// PC_BUS[ 1 ]
initial
begin
	PC_BUS[1] = 1'b1;
end 
// PC_BUS[ 0 ]
initial
begin
	PC_BUS[0] = 1'b0;
end 
// ULA_BUS[ 7 ]
initial
begin
	ULA_BUS[7] = 1'b0;
end 
// ULA_BUS[ 6 ]
initial
begin
	ULA_BUS[6] = 1'b0;
end 
// ULA_BUS[ 5 ]
initial
begin
	ULA_BUS[5] = 1'b0;
end 
// ULA_BUS[ 4 ]
initial
begin
	ULA_BUS[4] = 1'b0;
end 
// ULA_BUS[ 3 ]
initial
begin
	ULA_BUS[3] = 1'b0;
end 
// ULA_BUS[ 2 ]
initial
begin
	ULA_BUS[2] = 1'b0;
end 
// ULA_BUS[ 1 ]
initial
begin
	ULA_BUS[1] = 1'b0;
end 
// ULA_BUS[ 0 ]
initial
begin
	ULA_BUS[0] = 1'b1;
end 
// CW[ 11 ]
initial
begin
	CW[11] = 1'b0;
end 
// CW[ 10 ]
initial
begin
	CW[10] = 1'b0;
	CW[10] = #80000 1'b1;
	CW[10] = #30000 1'b0;
end 
// CW[ 9 ]
initial
begin
	CW[9] = 1'b0;
end 
// CW[ 8 ]
initial
begin
	CW[8] = 1'b0;
	CW[8] = #60000 1'b1;
	CW[8] = #20000 1'b0;
end 
// CW[ 7 ]
initial
begin
	CW[7] = 1'b0;
end 
// CW[ 6 ]
initial
begin
	CW[6] = 1'b0;
	CW[6] = #40000 1'b1;
	CW[6] = #20000 1'b0;
end 
// CW[ 5 ]
initial
begin
	CW[5] = 1'b0;
end 
// CW[ 4 ]
initial
begin
	CW[4] = 1'b0;
end 
// CW[ 3 ]
initial
begin
	CW[3] = 1'b0;
	CW[3] = #20000 1'b1;
	CW[3] = #20000 1'b0;
end 
// CW[ 2 ]
initial
begin
	CW[2] = 1'b0;
end 
// CW[ 1 ]
initial
begin
	CW[1] = 1'b0;
end 
// CW[ 0 ]
initial
begin
	CW[0] = 1'b1;
	CW[0] = #20000 1'b0;
end 
endmodule

